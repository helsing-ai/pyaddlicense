from pathlib import Path

import pytest

from pyaddlicense.main import (
    BothLicenseOptionsGivenError,
    GlobalSettings,
    add_license_to_file,
    comment_license_header,
    contains_license_or_is_generated,
    create_ignorespec_from_gitignore,
    file_has_license_or_is_generated,
    get_license_template,
    macro_license,
    process,
)

_LICENSE_CONTENT_TPL_STR = "{{ .YEAR }} {{ .HOLDER }} -- STR"
_LICENSE_CONTENT_TPL_FILE = "{{ .YEAR }} {{ .HOLDER }} -- FILE"


def test__macro_license__fills_year_and_holder():
    holder = "example"
    year = 2022

    expected = f"{year} {holder} -- STR"
    result = macro_license(_LICENSE_CONTENT_TPL_STR, holder, year)

    assert result == expected


def test__macro_license__no_macros_makes_no_changes():
    license_tpl = "2022 example"
    result = macro_license(license_tpl, "", None)
    assert result == license_tpl


def test__get_license_template__raises_exception_given_both_options(tmp_path):
    license_as_file = tmp_path / "license.txt"
    license_as_file.write_text(_LICENSE_CONTENT_TPL_FILE)

    with pytest.raises(BothLicenseOptionsGivenError):
        get_license_template(_LICENSE_CONTENT_TPL_STR, license_as_file)


def test__get_license_template__loads_file(tmp_path):
    license_as_file = tmp_path / "license.txt"
    license_as_file.write_text(_LICENSE_CONTENT_TPL_FILE)

    with open(license_as_file) as file:
        result = get_license_template(None, file)
        assert result == _LICENSE_CONTENT_TPL_FILE


def test__get_license_template__returns_license():
    result = get_license_template(_LICENSE_CONTENT_TPL_STR, None)
    assert result == _LICENSE_CONTENT_TPL_STR


def test__create_ignorespec_from_gitignore__returns_correct_spec(tmp_path):
    gitignore_file = tmp_path / ".gitignore"
    gitignore_file.write_text("*.txt\nbuild/")

    spec = create_ignorespec_from_gitignore(tmp_path)
    assert len(spec) == 2


_EXPECTED_BLOCK_COMMENT = """/**
* I am a
* block level
* comment.
*/
"""


def test__comment_license_header__js_example_correct():
    test_text = "I am a\nblock level\ncomment."
    result = comment_license_header(test_text, "/**", "* ", "*/")

    assert result == _EXPECTED_BLOCK_COMMENT


def test__comment_license_header__given_just_mid():
    expected = f"# {_LICENSE_CONTENT_TPL_STR}\n"
    result = comment_license_header(_LICENSE_CONTENT_TPL_STR, "", "# ", "")

    assert result == expected


def test__contains_license_or_is_generated__has_copyright():
    s = "# COPYRIGHT SOME COMPANY"
    assert contains_license_or_is_generated(s) is True


def test__contains_license_or_is_generated__is_autogenerated():
    s = "# Generated by THE VOID. DO NOT EDIT."
    assert contains_license_or_is_generated(s) is True


def test__contains_license_or_is_generated__contains_none():
    s = "Copyriht My Great Lisense Company"  # (Intentional mistakes to fail test)
    assert contains_license_or_is_generated(s) is False


def test__file_has_license_or_is_generated__has_copyright(tmp_path):
    tmp_file = tmp_path / "ohhai.py"
    tmp_file.write_text("# 1990 COPYRIGHT THE NINETIES KIDS")

    assert file_has_license_or_is_generated(tmp_file) is True


def test__file_has_license_or_is_generated__is_autogenerated(tmp_path):
    tmp_file = tmp_path / "ohhai.py"
    tmp_file.write_text("# Generated by CAP'NPROTOTHRIFT. DO NOT EDIT.")

    assert file_has_license_or_is_generated(tmp_file) is True


_EXAMPLE_PYTHON = "print('OHHAI2UTHAR!')"


def test__file_has_license_or_is_generated__no_copyright_not_autogenerated(tmp_path):
    tmp_file = tmp_path / "ohhai.py"
    tmp_file.write_text(_EXAMPLE_PYTHON)

    assert file_has_license_or_is_generated(tmp_file) is False


_EXAMPLE_STANDARD_LICENSE = "2023 Copyright Example Company\n"
_EXAMPLE_COMMENTED_LICENSE = f"# {_EXAMPLE_STANDARD_LICENSE}"


def test__add_license_to_file__standard_added_at_top(tmp_path):
    tmp_file = tmp_path / "ohhai.py"
    tmp_file.write_text(_EXAMPLE_PYTHON)

    add_license_to_file(tmp_file, _EXAMPLE_COMMENTED_LICENSE)

    expected = f"{_EXAMPLE_COMMENTED_LICENSE}\n{_EXAMPLE_PYTHON}"
    result = tmp_file.read_text()

    assert result == expected


_EXAMPLE_SHELL_HASHBANG = "#!/bin/bash"
_EXAMPLE_SHELL = "echo('EXAMPLE')"


def test__add_license_to_file__bash_added_after_hashbang(tmp_path):
    tmp_file = tmp_path / "ohhai.sh"
    tmp_file.write_text(f"{_EXAMPLE_SHELL_HASHBANG}\n{_EXAMPLE_SHELL}")

    add_license_to_file(tmp_file, _EXAMPLE_COMMENTED_LICENSE)

    expected = f"{_EXAMPLE_SHELL_HASHBANG}\n{_EXAMPLE_COMMENTED_LICENSE}\n{_EXAMPLE_SHELL}"
    result = tmp_file.read_text()

    assert result == expected


def get_generic_test_settings() -> GlobalSettings:
    return GlobalSettings(
        check=False,
        license=_EXAMPLE_STANDARD_LICENSE,
        read_gitignore=True,
        silent=True,
        root=Path(),
        files_changed=0,
        files_missing=0,
    )


def test__process__empty_file(tmp_path):
    settings = get_generic_test_settings()
    settings.root = tmp_path

    tmp_file = tmp_path / "ohhai.py"
    tmp_file.write_text("")

    process(tmp_file, settings, [])

    assert settings.files_changed == 1

    result = tmp_file.read_text()

    assert result == _EXAMPLE_COMMENTED_LICENSE


def test__process__standard_file(tmp_path):
    settings = get_generic_test_settings()
    settings.root = tmp_path

    tmp_file = tmp_path / "ohhai.py"
    tmp_file.write_text(_EXAMPLE_PYTHON)

    process(tmp_file, settings, [])

    assert settings.files_changed == 1

    result = tmp_file.read_text()

    assert result == f"{_EXAMPLE_COMMENTED_LICENSE}\n{_EXAMPLE_PYTHON}"


def test__process__new_line_first_thing_file(tmp_path):
    # (I.e. we should NOT put a newline if one exists)
    settings = get_generic_test_settings()
    settings.root = tmp_path

    tmp_file = tmp_path / "ohhai.py"
    tmp_file.write_text(f"\n{_EXAMPLE_PYTHON}")

    process(tmp_file, settings, [])

    assert settings.files_changed == 1

    result = tmp_file.read_text()

    assert result == f"{_EXAMPLE_COMMENTED_LICENSE}\n{_EXAMPLE_PYTHON}"


def test__process__check_mode_does_count_makes_no_changes(tmp_path):
    settings = get_generic_test_settings()
    settings.root = tmp_path
    settings.check = True

    tmp_file = tmp_path / "ohhai.py"
    tmp_file.write_text("")

    process(tmp_file, settings, [])

    assert settings.files_missing == 1

    result = tmp_file.read_text()

    assert result == ""


def test__process__process_recurses_into_directories(tmp_path):
    settings = get_generic_test_settings()
    settings.root = tmp_path
    settings.check = True

    tmp_dir = tmp_path / "src"
    tmp_dir.mkdir()

    tmp_file_a = tmp_dir / "a.py"
    tmp_file_a.write_text("")

    tmp_file_b = tmp_dir / "b.py"
    tmp_file_b.write_text("")

    tmp_file_c = tmp_dir / "c.py"
    tmp_file_c.write_text("")

    process(tmp_dir, settings, [])

    assert settings.files_missing == 3
